#!/usr/bin/env bash
set -eu -o pipefail
set -x

declare -r THIS_DIR=$(readlink --canonicalize --no-newline "$(dirname "${BASH_SOURCE[0]}")")
declare -r OPENSSL_1_PATH=${THIS_DIR}/support/openssl-1.0

main() {
	if command -v kerl 2&>/dev/null; then
		echo "KERL already seems to be available."
	else
		echo "Downloading and installing kerl..."
		install_kerl
	fi

	# NOTE: I'm not bothering with 19.3 because of the PITA around openssl versions there
	ensure_release "21.1" "std-21-1"
}

install_kerl() {
	local -r kerl_dir="$HOME/.local/bin"
	local -r kerl="${kerl_dir}/kerl"

	mkdir -p "${kerl_dir}"
	curl -Llsso "$kerl" "https://raw.githubusercontent.com/kerl/kerl/1.8.5/kerl"

	chmod +x "$kerl"
}

prepare_for_r19() {

	# R19 of Erlang needs openssh < 1.1 installed, and arch installs that to locations
	# that R19 can't cope with, so this works around that based on advice here:
	# https://github.com/asdf-vm/asdf-erlang/wiki/OpenSSL-on-ArchLinux
	mkdir -p "${OPENSSL_1_PATH}"
	pushd "${OPENSSL_1_PATH}"

	ln -sf /usr/lib/openssl-1.0 lib
	ln -sf /usr/include/openssl-1.0 include

	popd
}

ensure_release() {
	local -r version=${1}
	local -r build_name=${2}
	local -a config_options=()

	if (kerl list builds | grep "$build_name"); then
		echo "Erlang build ${build_name} already built."
	else
		echo "Building ${build_name}..."
		kerl build "${version}" "$build_name"
	fi

	if [[ "${version}" == "19."* ]]; then
		config_options+=("--with-ssl=${OPENSSL_1_PATH}")
	fi

	if [ -d  "$HOME/.local/opt/erlang-$build_name" ]; then
		echo "Build already installed."
	else
		echo "Installing build..."
		KERL_CONFIGURE_OPTIONS="${config_options[*]}" KERL_INSTALL_MANPAGES=yes kerl install "$build_name" "$HOME/.local/opt/erlang-$build_name"
	fi
}

main
